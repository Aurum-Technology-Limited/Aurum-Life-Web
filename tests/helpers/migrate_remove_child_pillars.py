#!/usr/bin/env python3
"""
Migration Script: Remove parent_pillar_id field from existing pillars
Removes the parent_pillar_id field from all pillars to eliminate child pillar functionality
"""

import sys
import os
from pymongo import MongoClient

def migrate_remove_parent_pillar_id():
    """Remove parent_pillar_id field from existing pillars"""
    
    print("üîÑ STARTING MIGRATION: Remove parent_pillar_id field from pillars")
    print("=" * 70)
    
    # Connect to MongoDB
    try:
        client = MongoClient('mongodb://localhost:27017')
        db = client['aurum_life']
        print("‚úÖ Connected to MongoDB")
    except Exception as e:
        print(f"‚ùå Failed to connect to MongoDB: {e}")
        return False
    
    try:
        collection = db['pillars']
        
        # Count documents that have parent_pillar_id field
        documents_with_field = collection.count_documents({"parent_pillar_id": {"$exists": True}})
        total_documents = collection.count_documents({})
        
        print(f"üìä Found {documents_with_field} pillars with parent_pillar_id field out of {total_documents} total")
        
        if documents_with_field == 0:
            print("‚úÖ No pillars have parent_pillar_id field - migration not needed")
            client.close()
            return True
        
        # Remove parent_pillar_id field from all documents
        result = collection.update_many(
            {"parent_pillar_id": {"$exists": True}},
            {"$unset": {"parent_pillar_id": ""}}
        )
        
        print(f"‚úÖ Removed parent_pillar_id field from {result.modified_count} pillars")
        
        # Verify the migration
        remaining_with_field = collection.count_documents({"parent_pillar_id": {"$exists": True}})
        
        if remaining_with_field == 0:
            print("üéâ MIGRATION COMPLETED SUCCESSFULLY!")
            print("‚úÖ All pillars now have flat structure (no child pillars)")
            success = True
        else:
            print(f"‚ö†Ô∏è MIGRATION INCOMPLETE: {remaining_with_field} pillars still have parent_pillar_id")
            success = False
        
        client.close()
        return success
        
    except Exception as e:
        print(f"‚ùå Error during migration: {e}")
        client.close()
        return False

def main():
    """Run the complete migration process"""
    
    print("üöÄ REMOVE CHILD PILLAR FUNCTIONALITY MIGRATION")
    print("=" * 70)
    print("This script will remove the parent_pillar_id field from all existing")
    print("pillars to eliminate child pillar functionality.")
    print()
    
    # Run migration
    migration_success = migrate_remove_parent_pillar_id()
    
    if migration_success:
        print("\nüéØ MIGRATION COMPLETED SUCCESSFULLY!")
        print("=" * 70)
        print("‚úÖ parent_pillar_id field removed from all pillars")
        print("‚úÖ Child pillar functionality disabled")
        print("‚úÖ All pillars now have flat structure")
        print("‚úÖ Backend models updated to remove hierarchy")
        print("‚úÖ API endpoints simplified")
        print()
        print("üåü Your application now has a simplified pillar structure!")
        print("Users can no longer create child pillars - only top-level pillars.")
    else:
        print("\n‚ùå MIGRATION FAILED")
        print("Please check the error messages above")

if __name__ == "__main__":
    main()